@page "/chatclient"
@rendermode InteractiveServer
@using CS3500.Networking
@using System.Text


<PageTitle>Chat Client</PageTitle>

<h1>Chat Client</h1>

@* Determine whether a pop-up window *@
@if (ifUserNameInserted)
{
    <div class="modal-backdrop" style="position: fixed; top: 0; left: 0;
                                       width: 100%; height: 100%;
                                       background-color: rgba(0,0,0,0.5);">
        <div class="modal-window" style="background-color: #fff; margin: 100px auto; padding: 20px; width: 300px;">
            <h3>Enter Username</h3>
            <input @bind="ProposedUsername" />
            <div style="margin-top: 10px;">
                <button class="btn btn-primary" @onclick="ConfirmUsername">Confirm</button>
                <button class="btn btn-secondary" @onclick="CancelUserName">Cancel</button>
            </div>
        </div>
    </div>
}

<div id="ConnectionInputs">
    <div class="input-row">
        <label for="url"> Server Address: </label>
        <input id="url" disabled="@network.IsConnected" type="text" @bind="ServerNameOrAddress" />
        <label for="url"> Port: </label>
        <input id="port" disabled="@network.IsConnected" type="number" @bind="ServerPort" class="port" />
        @if ( network.IsConnected )
        {
            <button class="btn btn-primary" @onclick="DisconnectFromServer">Disconnect</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="InsertUserName">Connect</button>
        }
    </div>


    @{
        bool disconnected = !network.IsConnected;
        string grayedOut = disconnected ? "grayedOut" : string.Empty;
    }

    <div class="input-row">
        <label for="message"> Chat: </label>
        <input id="message" class="@grayedOut" disabled="@(disconnected)" type="text" @onchange="HandleSendMessage" />
    </div>
    <div class="input-row">
        <div class="input-col">
            <div id="Messages" class="container @grayedOut">
                @foreach ( var line in AllMessages )
                {
                    <span class="themClass">
                        @line
                    </span>
                }

            </div>
        </div>
    </div>
</div>


@code
{
    /// <summary>
    /// Controls whether the "Enter Username" window is visible
    /// </summary>
    private bool ifUserNameInserted = false;

    /// <summary>
    /// Temporary storage for user's typed username
    /// </summary>
    private string ProposedUsername = "";

    /// <summary>
    /// Default server name
    /// </summary>
    private string ServerNameOrAddress = "localhost";

    /// <summary>
    /// Default server port
    /// </summary>
    private int ServerPort = 11000;

    /// <summary>
    /// The NetworkConnection object representing a connection with the server
    /// </summary>
    private NetworkConnection network = null!;

    /// <summary>
    /// Handler for the "Connect" button just show the window.
    /// </summary>
    private void InsertUserName(){
        ifUserNameInserted = true;
    }

    /// <summary>
    /// If user cancels the username input
    /// </summary>
    private void CancelUserName(){
        ProposedUsername = "";
        ifUserNameInserted = false;
    }

    /// <summary>
    ///  Called when user clicks "Confirm" inside the username modal,
    ///  Actually connects to the server, sends the username,
    ///  starts reading messages
    /// </summary>
    private void ConfirmUsername()
    {
        if (string.IsNullOrWhiteSpace(ProposedUsername))
            return;

        try
        {
            //Actually connect now
            network.Connect(ServerNameOrAddress, ServerPort);

            //Send the first line as username
            network.Send(ProposedUsername);

            //for refresh
            ifUserNameInserted = false;

            //Start asynchronous reading
            new Thread(() =>
            {
                while (network.IsConnected)
                {
                    try
                    {
                        var message = network.ReadLine();
                        if (message == null)
                            throw new Exception("Disconnected");

                        message = $"{DateTime.Now:HH:mm tt} - {message}";
                        AllMessages.Insert(0, message);

                        //Update UI from another thread
                        InvokeAsync(() => StateHasChanged());
                    }
                    catch
                    {
                        
                    }
                }
            }).Start();
        }
        catch
        {
            
        }
    }
    /// <summary>
    /// The string shown in the message display area, representing all messages seen
    /// </summary>
    private string MessageDisplayTextAreaData
    {
        get
        {
            return string.Join( "\n", AllMessages );
        }
    }

    /// <summary>
    /// All of the messages seen by the server
    /// </summary>
    private List<string> AllMessages = new();


    /// <summary>
    /// Disconnect the network object from the server.
    /// </summary>
    private void DisconnectFromServer()
    {
        network.Disconnect();
        AllMessages.Clear();//clear all msg
        ProposedUsername = "";
    }

    /// <summary>
    ///   When the user types a message and presses enter, send the message
    ///   to the server.
    /// </summary>
    /// <param name="e"> Event data containing the message. </param>
    private void HandleSendMessage( ChangeEventArgs e )
    {
        if ( e.Value != null )
        {
            network.Send( $"{e.Value}" );
        }
    }

    /// <summary>
    ///   Create a default network object
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        network = new();
    }

}
